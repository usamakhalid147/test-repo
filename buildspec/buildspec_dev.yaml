version: 0.2

env:
  variables:
    DevCrossAccountRoleArn: arn:aws:iam::853641056903:role/cross-account-role-serverless-deployment

    DevStageName: "dev"
    DEVSourceBucketNamePrimary: "devckevendor"
    DEVReportingDataBucketNamePrimary: "devckereportingdata"
    DEVLambdaBucketNamePrimary: "devckelambda"
    DEVArchiveBucketNamePrimary: "devckearchive"
    DEVConfigBucketNamePrimary: "devckelambda"

    #DevStageName: "dev"
    DEVSourceBucketNameSecondary: "devckevendor"
    DEVReportingDataBucketNameSecondary: "devckereportingdata-us-east-1"
    DEVLambdaBucketNameSecondary: "devckelambda-us-east-1"
    DEVArchiveBucketNameSecondary: "devckearchive-us-east-1"
    DEVConfigBucketNameSecondary: "devckelambda-us-east-1"
    XenialFirehoseBucketName: ""


phases:
  pre_build:
    commands:
      - |
        # python --version
        # for dir in lambdas/*; do
        #   if [ -d "$dir" ]; then
        #     folder_name=$(basename "$dir")
        #     pushd $dir
        #     ls -ltra
        #     # Run pip install if requirements.txt exists
        #     if [ -f "requirements.txt" ]; then
        #       pip install -r requirements.txt -t .
        #     fi            
        #     zip -q -r "$folder_name.zip" *
        #     aws s3 cp "$folder_name.zip" "s3://$DEVLambdaBucketNamePrimary/lambdas/$folder_name.zip"
        #     aws s3 cp "$folder_name.zip" "s3://$DEVLambdaBucketNameSecondary/lambdas/$folder_name.zip"
        #     rm "$folder_name.zip"
        #     popd

        #     xenial_order_version_primary=$(aws s3api head-object --bucket "$DEVLambdaBucketNamePrimary" --key "lambdas/XenialOrders.zip" | jq -r ".VersionId")
        #     replayXenialOrders_version_primary=$(aws s3api head-object --bucket "$DEVLambdaBucketNamePrimary" --key "lambdas/replayXenialOrders.zip" | jq -r ".VersionId")
        #     tokenvalidationxenial_version_primary=$(aws s3api head-object --bucket "$DEVLambdaBucketNamePrimary" --key "lambdas/tokenvalidationxenial.zip" | jq -r ".VersionId")

        #     xenial_order_version_secondary=$(aws s3api head-object --bucket "$DEVLambdaBucketNameSecondary" --key "lambdas/XenialOrders.zip" | jq -r ".VersionId")
        #     replayXenialOrders_version_secondary=$(aws s3api head-object --bucket "$DEVLambdaBucketNameSecondary" --key "lambdas/replayXenialOrders.zip" | jq -r ".VersionId")
        #     tokenvalidationxenial_version_secondary=$(aws s3api head-object --bucket "$DEVLambdaBucketNameSecondary" --key "lambdas/tokenvalidationxenial.zip" | jq -r ".VersionId")

        #   fi
        # done
        # ## Upload the Layer archive to Lambda Bucket
        # #aws s3 cp "layers/snowflake-connector/PythonSnowflakeConnector.zip" "s3://$DEVLambdaBucketName/layers/snowflake-connector/PythonSnowflakeConnector.zip"
        # #snowflake_connector_s3_object_version=$(aws s3api head-object --bucket "$DEVLambdaBucketName" --key "layers/snowflake-connector/PythonSnowflakeConnector.zip" | jq -r ".VersionId")
        
        # #Use xenial AWS secret for authorization
        # Xenial_secret=$(aws secretsmanager get-secret-value --secret-id github/xenial/authorization --query SecretString --output text --region us-east-2)

        # Retrieve Snowflake credentials and parse JSON for 'dev' environment only
        CREDENTIALS_JSON=$(aws secretsmanager get-secret-value --secret-id "DEV" --query SecretString --output text)
        DEV_CREDENTIALS=$(echo $CREDENTIALS_JSON | jq '.dev')
        export SNOWFLAKE_USERNAME=$(echo $DEV_CREDENTIALS | jq -r '.snowflakeUsername')
        export SNOWFLAKE_ACCOUNTURL=$(echo $DEV_CREDENTIALS | jq -r '.snowflakeAccounturl')
        export SNOWFLAKE_ROLE=$(echo $DEV_CREDENTIALS | jq -r '.snowflakeRole')
        export SNOWFLAKE_DATABASE=$(echo $DEV_CREDENTIALS | jq -r '.snowflakeDatabase')
        export SNOWFLAKE_SCHEMA=$(echo $DEV_CREDENTIALS | jq -r '.snowflakeSchema')
        export SNOWFLAKE_TABLE=$(echo $DEV_CREDENTIALS | jq -r '.snowflakeTable')
        export SNOWFLAKE_PRIVATEKEY=$(echo $DEV_CREDENTIALS | jq -r '.snowflakePrivatekey')
        export SNOWFLAKE_PASSPHRASE=$(echo $DEV_CREDENTIALS | jq -r '.snowflakePassphrase')

        # Print all exported secrets
        echo "SNOWFLAKE_USERNAME: $SNOWFLAKE_USERNAME"
        echo "SNOWFLAKE_ACCOUNTURL: $SNOWFLAKE_ACCOUNTURL"
        echo "SNOWFLAKE_ROLE: $SNOWFLAKE_ROLE"
        echo "SNOWFLAKE_DATABASE: $SNOWFLAKE_DATABASE"
        echo "SNOWFLAKE_SCHEMA: $SNOWFLAKE_SCHEMA"
        echo "SNOWFLAKE_TABLE: $SNOWFLAKE_TABLE"
        echo "SNOWFLAKE_PRIVATEKEY: $SNOWFLAKE_PRIVATEKEY"
        echo "SNOWFLAKE_PASSPHRASE: $SNOWFLAKE_PASSPHRASE"

  build:
    on-failure: ABORT
    commands:
        # ## Assume the cross-account role to Dev account
        # - aws sts assume-role --role-arn $DevCrossAccountRoleArn --role-session-name "AssumeRoleSession" > assumed_role.json
        # - export AWS_ACCESS_KEY_ID=$(cat assumed_role.json | jq -r '.Credentials.AccessKeyId')
        # - export AWS_SECRET_ACCESS_KEY=$(cat assumed_role.json | jq -r '.Credentials.SecretAccessKey')
        # - export AWS_SESSION_TOKEN=$(cat assumed_role.json | jq -r '.Credentials.SessionToken')
        # - aws sts get-caller-identity
        # - |
        #   aws --region us-east-2 cloudformation deploy \
        #     --template-file ./config/xenial.yaml \
        #     --stack-name CF-CKEXENIAL-DEV \
        #     --s3-bucket $DEVLambdaBucketNamePrimary \
        #     --capabilities CAPABILITY_NAMED_IAM \
        #     --parameter-overrides \
        #       "SnowflakeAccountUrl=$SNOWFLAKE_ACCOUNTURL" \
        #       "SnowflakeUser=$SNOWFLAKE_USERNAME" \
        #       "SnowflakePrivateKey=$SNOWFLAKE_PRIVATEKEY"  \
        #       "SnowflakeKeyPassphrase=$SNOWFLAKE_PASSPHRASE"  \
        #       "SnowflakeDatabase=$SNOWFLAKE_DATABASE"  \
        #       "SnowflakeSchema=$SNOWFLAKE_SCHEMA"  \
        #       "SnowflakeTable=$SNOWFLAKE_TABLE"  \
        #       "KinesisFirehoseS3BucketName=$XenialFirehoseBucketName"
        #       "ArchiveBucketName=$DEVArchiveBucketNamePrimary" \
        #       "StageName=$DevStageName" \
        #       "XenialOrderLambdaVersion=$xenial_order_version_primary" \
        #       "XenialAuthCode=$Xenial_secret" \
        #       "ReplayXenialOrdersLambdaVersion=$replayXenialOrders_version_primary" \
        #       "TokenValidationXenialLambdaVersion=$tokenvalidationxenial_version_primary" \
        #       "LambdaBucketName=$DEVLambdaBucketNamePrimary" \
        #       "CKEBUCKET=$DEVReportingDataBucketNamePrimary" \
        #     --tags \
        #       "Project=Xenial Transaction Streaming" "CostCenter=Corporate Applications" \
        #       "Owner=Corporate Applications" "Environment=dev" "SupportPartner=AWS" \
        #       "Team=Integration" "ProjectExpiration=12/31/9999" "CreatedBy=vvegesna@ckr.com"
              
        #- aws --region us-east-2 cloudformation deploy --template-file ./config/xenial.yaml --stack-name CF-CKEXENIAL-DEV --s3-bucket $DEVLambdaBucketNamePrimary --capabilities CAPABILITY_NAMED_IAM  --parameter-overrides  "ArchiveBucketName=$DEVArchiveBucketNamePrimary" "StageName=$DevStageName" "XenialOrderLambdaVersion=$xenial_order_version_primary" "XenialAuthCode=$Xenial_secret" "ReplayXenialOrdersLambdaVersion=$replayXenialOrders_version_primary" "TokenValidationXenialLambdaVersion=$tokenvalidationxenial_version_primary" "LambdaBucketName=$DEVLambdaBucketNamePrimary" "CKEBUCKET=$DEVReportingDataBucketNamePrimary" --tags "Project=Xenial Transaction Streaming" "CostCenter=Corporate Applications" "Owner=Corporate Applications" "Environment=dev" "SupportPartner=AWS" "Team=Integration" "ProjectExpiration=12/31/9999" "CreatedBy=vvegesna@ckr.com"
      
        #aws --region us-east-1 cloudformation deploy --template-file ./config/xenial.yaml --stack-name CF-CKEXENIAL-DEV --s3-bucket $DEVLambdaBucketNameSecondary --capabilities CAPABILITY_NAMED_IAM  --parameter-overrides  "ArchiveBucketName=$DEVArchiveBucketNameSecondary" "StageName=$DevStageName" "XenialOrderLambdaVersion=$xenial_order_version_secondary" "XenialAuthCode=$Xenial_secret" "ReplayXenialOrdersLambdaVersion=$replayXenialOrders_version_secondary" "TokenValidationXenialLambdaVersion=$tokenvalidationxenial_version_secondary" "LambdaBucketName=$DEVLambdaBucketNameSecondary" "CKEBUCKET=$DEVReportingDataBucketNameSecondary" --tags "CostCenter=Corporate Applications" "Owner=Corporate Applications" Environment=dev SupportPartner=AWS Team=Integration ProjectExpiration=12/31/9999 CreatedBy=vvegesna@ckr.com

  post_build:
    commands:
        # - restapiid=$(aws --region us-east-2 cloudformation describe-stacks --stack-name CF-CKEXENIAL-DEV --query 'Stacks[0].Outputs[?OutputKey==`RestAPIId`].OutputValue' --output text)
        # - aws apigateway create-deployment --rest-api-id $restapiid --stage-name $DevStageName
        # #- restapiid=$(aws --region us-east-1 cloudformation describe-stacks --stack-name CF-CKEXENIAL-DEV --query 'Stacks[0].Outputs[?OutputKey==`RestAPIId`].OutputValue' --output text)
        # #- aws apigateway create-deployment --rest-api-id $restapiid --stage-name $DevStageName



